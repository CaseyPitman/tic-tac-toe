{"version":3,"sources":["initialBoardState.js","cells.js","tracker.js","board.js","buttons.js","winCombos.js","App.js","index.js"],"names":["initialBoard","cell","status","letter","Cell","props","currentClass","inProgress","className","onClick","event","id","updateCell","Tracker","text","gameStatus","winner","colSpan","Board","cells","this","boardStatus","map","cur","ind","key","cellSpacing","Component","Button","buttonText","type","changeButton","winCombos","initialState","board","visibleButton","turnCount","winStatus","App","reset","setState","stage","checkWin","posWins","filter","combo","includes","player","state","check","every","el","winningCells","indexOf","winningBoard","drawBoard","a","matchID","updatedCells","turn","newTurnCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1c075d0.chunk.js","sourcesContent":["//The beginning state of the board on init or reset.\n\nconst initialBoard = [\n   {\n     cell: 0,\n     status: 'empty',  //or occupied or win\n     letter: 'none' //or X or O\n   },\n   {\n    cell: 1,\n    status: 'empty', \n    letter: 'none' \n   },\n   {\n     cell: 2,\n     status: 'empty',  \n     letter: 'none' \n   },\n   {\n     cell: 3,\n     status: 'empty',  \n     letter: 'none' \n   },\n   {\n     cell: 4,\n     status: 'empty', \n     letter: 'none'\n   },\n   {\n     cell: 5,\n     status: 'empty',  \n     letter: 'none' \n   },        {\n     cell: 6,\n     status: 'empty',  \n     letter: 'none' \n   },        {\n     cell: 7,\n     status: 'empty',  \n     letter: 'none' \n   },        {\n     cell: 8,\n     status: 'empty',  \n     letter: 'none' \n   }\n ];\n\n export default initialBoard;","/* This module renders and updates the cells of the game \nboard based on user interaction. */\n\nimport React from 'react'\n\nlet Cell = (props) => {\n\n   //ClickHandler to change state of a clicked cell.\n   let handleClick =(event) => {\n      //If game hasn't started, you can't click the cell\n      if (!props.inProgress){\n         return;\n      } \n      /*  Game is in progress and a square has been clicked. It \n      cannot be clicked again. */\n      else if(props.status === 'occupied'){\n         return;\n      } \n      //Cell has not been clicked and is thus available.\n      else {\n         //Identifies cell clicked\n         let id = props.id;\n         //Updates cell\n         props.updateCell(id);\n      }\n   }\n\n   //Alters the state of the cell to reflect game play decisions.\n   let currentClass = 'cell';\n   let letter = ''\n   if (props.status ===  'occupied'){\n      currentClass += ' occupied'\n      letter = props.letter;\n   } else if (props.status === 'win'){\n      currentClass += ' win'\n      letter = props.letter;\n   } else if (props.inProgress){\n      currentClass += ' empty'\n   }\n\n   return (\n      <td className = {currentClass} onClick = {handleClick}>{letter}</td>\n   )\n}\n\nexport default Cell;","/* This module maintains and updates the game status and \nturn tracker at the bottom of the board */\n\nimport React from 'react';\n\nlet Tracker = (props) => {\n   //Waiting for game to start\n   let text = 'Let\\'s Play';\n   //Displays current player\n   if (props.gameStatus === 'X'){\n      text = `X's turn`;\n   } else if (props.gameStatus === 'O') {\n      text = `O's turn`;\n   } \n   // Game has been won\n   else if (props.gameStatus === 'win'){\n      text = (props.winner === 'X') ? 'X wins!' : 'O wins!'\n   } \n   // Game is a draw\n   else if (props.gameStatus === 'draw'){\n      text = 'Draw';\n   }\n\n\n   return (\n      <tr className = 'turn-tracker' >\n         <th className = 'turn-tracker-text' colSpan = '3'>{text}</th>\n      </tr>\n   )\n}\n\nexport default Tracker;","/* This module renders the tic tac toe game board  */\n\nimport React, {Component} from 'react';\nimport Cell from './cells'\nimport Tracker from './tracker'\n\n\nclass Board extends Component {\n\n   render(){ \n    //Render cells\n    let cells = this.props.boardStatus.map((cur, ind) => {\n    return(\n\n    <Cell \n    key = {this.props.boardStatus[ind].cell} \n    id = {this.props.boardStatus[ind].cell}\n    status = {this.props.boardStatus[ind].status} \n    letter = {this.props.boardStatus[ind].letter}\n    inProgress = {this.props.inProgress}\n    updateCell = {this.props.updateCell}/>)\n  });\n\n\n\n\n    return(\n\n      <table className = 'game-board' cellSpacing = '0'>\n        <tbody>   \n          <tr className = 'title' >\n            <th className = 'title-text' colSpan = '3'>Tic Tac Toe</th>\n          </tr>\n          <tr className = 'row-0'>\n            {cells[0]}\n            {cells[1]}\n            {cells[2]}\n          </tr>\n          <tr className = 'row-1'>\n            {cells[3]}\n            {cells[4]}\n            {cells[5]}\n          </tr>\n          <tr className = 'row-2'>\n            {cells[6]}\n            {cells[7]}\n            {cells[8]} \n          </tr> \n          <Tracker \n            gameStatus = {this.props.gameStatus}\n            winner = {this.props.winner}\n          />\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;","/* This module conditionally renders the button \nbased on the current stage the game is in. */\n\n\nimport React from 'react';\n\n\nlet Button  = (props) => {\n\n   //Click Handler changes button function dependent on stage in game\n   let handleClick = () => {\n      props.changeButton(props.gameStatus);\n   }\n\n   //Determine Button to show based on context\n   let buttonText = '';\n   if (props.type === 'init'){\n      buttonText = 'Start';\n   } else if (props.type === 'reset'){\n      buttonText = 'Play Again';\n   } else {\n      buttonText = 'Quit';\n   }\n\n   return(\n      <div className = 'button-div'>\n         <button className = 'button' onClick = {handleClick}>{buttonText}</button>\n      </div>\n   )\n}\n\nexport default Button;","//Array of all possible winning combinations\n\nconst winCombos = [\n   [0,1,2],\n   [3,4,5],\n   [6,7,8],\n   [0,3,6],\n   [1,4,7],\n   [2,5,8],\n   [0,4,8],\n   [2,4,6]\n];\n\n\nexport default winCombos;","import React, {Component} from 'react';\n\nimport initialBoard from './initialBoardState'\nimport Board from './board'\nimport Button from './buttons'\nimport winCombos from './winCombos'\n\n//Beginning state\nlet initialState = {\n  board: initialBoard,\n  visibleButton: 'init', //or reset or quit playing\n  gameStatus: 'init',    //or 'X' or 'O', or win\n  inProgress: false,\n  turnCount: 0,\n  winStatus: false,\n  winner: ''\n}\n\nclass App extends Component {\n  constructor(props){\n    super()\n\n    this.state = initialState;\n  }\n\n  //Resets game to initial state\n  reset = () => {\n    this.setState(initialState)\n  }\n\n  //Change button based on stage of the game\n  changeButton = (stage) => {\n    if (stage === 'init') {\n      this.setState({\n        visibleButton: 'quit', \n        gameStatus: 'X',\n        inProgress: true\n      });\n    } else if (stage === 'X' || stage === 'O' || stage === 'win' || stage ==='draw'){\n        this.reset();\n    }\n  }\n\n  // //Check for win\n  checkWin = (id, letter) => {\n\n    //Filter possible win combos by ones that include last clicked cell\n    let posWins = winCombos.filter(combo => combo.includes(id));\n\n    //Filter an array of the cells that contain the last letter clicked\n    let currentLetterCells = this.state.board.filter(cur => cur.letter === letter);\n\n    //Map to create an array of indices that are marked with the current letter\n    let player = currentLetterCells.map(cur => cur.cell);\n\n    //Check to see if any of the win combos are wholly included in the \n    //list of cells containing the current letter \n    let check = posWins.map((cur) => {\n      return cur.every(el => player.includes(el));\n    })\n\n    //Isolate the winning combination of cells.\n    let winIdx = check.indexOf(true);\n    let winningCells = posWins[winIdx];\n\n    //A win has been found\n    if (check.includes(true)){\n      this.setState({winStatus: true});\n    }\n\n    //There is a win, then set the state to reflect this\n    if (this.state.winStatus) {\n      //Change the winning cells to reflect win in state\n      let matchWinCells = (cell) =>{ \n        if (!winningCells.includes(cell.cell)){\n          return cell;\n        } else { \n          //Change cell letter and background\n          return {\n            ...cell,\n            status: 'win'\n          }\n        }\n      }\n\n      let winningBoard = this.state.board.map(matchWinCells);\n\n      this.setState({\n        winner: letter,           //Set winner\n        inProgress:false,         //End game\n        gameStatus: 'win' ,       //Set game status as win\n        visibleButton: 'reset',   //Set button to reset game\n        board: winningBoard       //Update to final board\n      })\n    }\n\n\n    //If board is filled in and nobody has won, display a draw.\n    if (this.state.turnCount === 9 && !this.state.winStatus){\n      //Turns all cells red\n      let drawBoard = this.state.board.map((cell) => {\n        return {\n          ...cell,\n          status: 'win' //Turns all cell backgrounds red\n        }\n      })\n\n      //Sets button to 'play again' and tracker to 'draw'\n      this.setState({\n        board: drawBoard,\n        visibleButton: 'reset',\n        gameStatus: 'draw'\n      });\n    }\n  }\n\n  //User clicks on cell during game play\n  updateCell = async (id) => {\n    //Identify and update clicked cell.\n    let matchID = (cell) => {\n      if (cell.cell !== id){\n        return cell;\n      } else { \n        //Change cell letter and background\n        return {\n          ...cell,\n          status: 'occupied', \n          letter: this.state.gameStatus\n        }\n      }\n    }\n\n    //Update current turn and turn counter\n    let letter = this.state.gameStatus;\n    let updatedCells = this.state.board.map(matchID);\n    let turn = (this.state.gameStatus === 'X') ? 'O' : 'X';\n    let newTurnCount = this.state.turnCount + 1;\n    \n    //Update board\n    await this.setState({\n      board: updatedCells,\n      gameStatus: turn,\n      turnCount: newTurnCount\n    });\n\n    //Check to see if the game has been won\n    this.checkWin(id, letter);\n  }\n \n  render (){\n\n    return (\n      <div className=\"App\">\n        <Board \n          boardStatus = {this.state.board}\n          gameStatus = {this.state.gameStatus}\n          inProgress = {this.state.inProgress}\n          updateCell = {this.updateCell}\n          winner = {this.state.winner} \n        />\n\n        <Button \n          type = {this.state.visibleButton}\n          gameStatus = {this.state.gameStatus}\n          changeButton = {this.changeButton} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './styles.css'\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}